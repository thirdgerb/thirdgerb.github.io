<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swoole on 烈风&#39;s Blog</title>
    <link>https://thirdgerb.github.io/tags/swoole/</link>
    <description>Recent content in Swoole on 烈风&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sat, 20 Jul 2019 11:19:53 +0800</lastBuildDate>
    
	<atom:link href="https://thirdgerb.github.io/tags/swoole/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在Swoole中使用双IoC容器实现无污染的依赖注入</title>
      <link>https://thirdgerb.github.io/posts/2019-07/double-container-used-in-swoole/</link>
      <pubDate>Sat, 20 Jul 2019 11:19:53 +0800</pubDate>
      
      <guid>https://thirdgerb.github.io/posts/2019-07/double-container-used-in-swoole/</guid>
      <description>简介: 容器(container)技术(可以理解为全局的工厂方法), 已经是现代项目的标配. 基于容器, 可以进一步实现控制反转, 依赖注入. Laravel 的巨大成功就是构建在它非常强大的IoC容器 illuminate/container 基础上的. 而 PSR-11 定义了标准的 container , 让更多的 PHP 项目依赖容器实现依赖解耦, 面向接口编程. 另一方面, PHP 天生一个进程响应一次请求的模型, 已经不能完全适应开发的需要. 于是 Swoole, reactPHP, roadrunner 也越来越流行. 它们共同的特点是一个 php worker 进程在生命周期内要响应</description>
    </item>
    
  </channel>
</rss>